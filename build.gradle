/*noinspection OptimizeUnusedImports,Unusedimports,AutoImports */


import groovy.ui.GroovyMain

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'maven'

sourceCompatibility = 1.8
version = '0.81'

def contribScripts = [
    'Contrib/update-contrib.groovy'
]

repositories {
    jcenter()
}

buildscript {
    repositories {
        maven {
            url uri('./maven-local')
        }
        jcenter()
    }

    dependencies {
//        classpath 'org.apache.maven:maven-plugin-api:3.3.1+'
        classpath 'org.apache.maven:maven-core:3.3.1+'
        classpath 'org.apache.commons:commons-lang3:3.4'
        classpath 'com.arg1arg2:maven-hack:1.0-SNAPSHOT'
//        classpath 'org.apache.maven:maven-artifact:3.3.1+'
//        classpath 'org.apache.maven:maven-model:3.3.1+'
//        classpath 'org.apache.maven:maven-settings:3.3.1+'
//        classpath 'org.apache.maven:maven-compat:3.3.1+'
//        classpath 'org.apache.maven:maven-aether-provider:3.3.1+'
//        classpath 'org.apache.maven:maven-repository-metadata:3.3.1+'
        classpath 'org.apache.maven:maven-embedder:3.3.1+'


//        classpath 'org.apache.maven:maven-settings-builder:3.3.1+'
//        classpath 'org.apache.maven:maven-model-builder:3.3.1+'
//        classpath 'org.apache.maven:apache-maven:3.3.1+'
//        classpath 'org.apache.maven:maven-builder-support:3.3.1+'
//        classpath 'org.apache.maven:maven:3.3.1+'
    }
}

def boolean isMSWin() {
    return System.getProperty("os.name").toLowerCase().contains("windows");
}

def String escapeshellarg(String arg, boolean quote = false) {
    StringBuilder sb = new StringBuilder(arg.length() * 2);

    for (int i = 0; i < arg.length(); i++) {
        char c = arg.charAt(i);

        switch (c) {
            case '"':
                sb.append('\\');
                sb.append(c);
                break;
            case '%':
                sb.append (isWin ? ' ' : c)
                break;
            default:
                sb.append(c)
                break;
        }
    }

    return quote ? String.format('%1$c%2$s%1$c', '"' as char, sb.toString()) : sb.toString();
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

task updateContrib {
    for (scpt in contribScripts) {
        def String safeScript = escapeshellarg(new File(projectDir, scpt).absolutePath)

        GroovyMain.main(["-Da1a2.groovy.script=$safeScript", scpt] as String[])
    }
}


task buildEFX (dependsOn: updateContrib) {
//    MavenCli cli = new MavenCli();
//
//    //def handler = new org.gradle.api.internal.artifacts.dsl.DefaultRepositoryHandler();
//
//    def mereq = new DefaultMavenExecutionRequest();
//    mereq.setEventSpyDispatcher(new EventSpyDispatcher());
//    def remrep = new org.apache.maven.artifact.repository.ArtifactRepository();// RemoteRepository.Builder(project.repositories.jcenter().).build();
//    //project.repositories.jcenter()
//    mereq.addRemoteRepository(MavenRepositorySystem.buildArtifactRepository( remrep ));
//
//    def req = new com.arg1arg2.A1A2FluentCliRequestBuilder()
//        .args("clean", "build")
//        .quiet(false)
//        .multiModuleProjectDirectory(File.createTempDir("a1a2_","_mvn_mmpd"))
//        .workingDirectory(projectDir, 'Contrib/e-fx-eclipse/svg2xml')
//        .request(mereq)
//        .debug(true)
//        .build();
//
//        def res = cli.doMain(req);
//
//    if (res as int != 0) {
//        System.out.println("Maven Client => "+ReflectionToStringBuilder.toString(cli as Object))
//        System.out.println("Maven Request => "+Objects.toString(req as Object))
//        System.out.println("Maven Return => "+Objects.toString(res))
//        throw new GradleException("A required maven execution has failed.")
//    }
}

task buildContrib(dependsOn: buildEFX) {

}


tasks.findByName("buildContrib").dependsOn("updateContrib")
tasks.findByName("compileJava").dependsOn("buildContrib")